package com.example.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATABASE_MANGEMENT".
*/
public class DatabaseMangementDao extends AbstractDao<DatabaseMangement, Long> {

    public static final String TABLENAME = "DATABASE_MANGEMENT";

    /**
     * Properties of entity DatabaseMangement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CityId = new Property(0, Long.class, "cityId", true, "_id");
        public final static Property CityName = new Property(1, String.class, "cityName", false, "CITY_NAME");
        public final static Property CityNumber = new Property(2, String.class, "cityNumber", false, "CITY_NUMBER");
    }


    public DatabaseMangementDao(DaoConfig config) {
        super(config);
    }
    
    public DatabaseMangementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATABASE_MANGEMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cityId
                "\"CITY_NAME\" TEXT NOT NULL UNIQUE ," + // 1: cityName
                "\"CITY_NUMBER\" TEXT NOT NULL UNIQUE );"); // 2: cityNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATABASE_MANGEMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DatabaseMangement entity) {
        stmt.clearBindings();
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(1, cityId);
        }
        stmt.bindString(2, entity.getCityName());
        stmt.bindString(3, entity.getCityNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DatabaseMangement entity) {
        stmt.clearBindings();
 
        Long cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindLong(1, cityId);
        }
        stmt.bindString(2, entity.getCityName());
        stmt.bindString(3, entity.getCityNumber());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DatabaseMangement readEntity(Cursor cursor, int offset) {
        DatabaseMangement entity = new DatabaseMangement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cityId
            cursor.getString(offset + 1), // cityName
            cursor.getString(offset + 2) // cityNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DatabaseMangement entity, int offset) {
        entity.setCityId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityName(cursor.getString(offset + 1));
        entity.setCityNumber(cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DatabaseMangement entity, long rowId) {
        entity.setCityId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DatabaseMangement entity) {
        if(entity != null) {
            return entity.getCityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DatabaseMangement entity) {
        return entity.getCityId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
